char	*handle_alpha(char **line, char *buffer)
{
	char	*extracted;
	char	*ptr;

	ptr = *line;
	while (ft_isalnum(*ptr))
		ptr++;
	extracted = ft_substr(*line, 0, ptr - *line);
	if (!extracted)
		return (free(buffer), NULL);
	*line = ptr;
	buffer = join(buffer, extracted);
	free(extracted);
	return (buffer);
}




char	*handle_quote(char **line, char *buffer)
{
	char	*extracted;
	char	*start;
	char	*end;

	start = (*line) + 1;
	end = ft_strchr(start, **line);
	if (!end)
		return (NULL);
	extracted = ft_substr(start, 0, end - start);
	if (!extracted)
		return (NULL);
	*line = end + 1;
	buffer = join(buffer, extracted);
	free(extracted);
	return (buffer);
}

int	handle_sep(char **line, char **buffer, t_list **list)
{
	*buffer = ft_strdup(is_separator(*line));
	if (!*buffer)
		return (0);
	*line += ft_strlen(is_separator(*line));
	if (ft_appendtoken(list, buffer) == 0)
		return (free(*buffer), 0);
	return (1);
}

int	set_token(char *line, t_token *token, t_token *old_token)
{
	char	*str;

	if (*line == '\0')
		;
	token->type = get_token_type(*line);
	token->len = get_token_length(*line, token->type);
	if (token->type == SPACE &&)
	{
		if ()
		token->content = ft_substr(*line, 0, token->len);
		if (token->content == NULL)
			return (0);
	}
	else if (old != NULL)
	{
		
	}
	if (token->type == SPACE && old != NULL)
		return (token->content = old, 1);
	else if (is_sep(line) == token->type && old != NULL)
	{
		str = ft_substr(*line, 0, token->len);
		if (str == NULL)
			return (0);
		token->content = ;
	}
	return (1);
}